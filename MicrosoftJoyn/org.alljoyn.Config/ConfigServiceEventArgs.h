//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace Config {

// Methods
public ref class ConfigFactoryResetCalledEventArgs sealed
{
public:
    ConfigFactoryResetCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ConfigFactoryResetResult^ Result
    {
        ConfigFactoryResetResult^ get() { return m_result; }
        void set(_In_ ConfigFactoryResetResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ConfigFactoryResetResult^>^ GetResultAsync(ConfigFactoryResetCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ConfigFactoryResetResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ConfigFactoryResetResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ConfigFactoryResetResult^ m_result;
};

public ref class ConfigRestartCalledEventArgs sealed
{
public:
    ConfigRestartCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ConfigRestartResult^ Result
    {
        ConfigRestartResult^ get() { return m_result; }
        void set(_In_ ConfigRestartResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ConfigRestartResult^>^ GetResultAsync(ConfigRestartCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ConfigRestartResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ConfigRestartResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ConfigRestartResult^ m_result;
};

public ref class ConfigGetConfigurationsCalledEventArgs sealed
{
public:
    ConfigGetConfigurationsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberInputArg);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ConfigGetConfigurationsResult^ Result
    {
        ConfigGetConfigurationsResult^ get() { return m_result; }
        void set(_In_ ConfigGetConfigurationsResult^ value) { m_result = value; }
    }

    property Platform::String^ InputArg
    {
        Platform::String^ get() { return m_interfaceMemberInputArg; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ConfigGetConfigurationsResult^>^ GetResultAsync(ConfigGetConfigurationsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ConfigGetConfigurationsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ConfigGetConfigurationsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ConfigGetConfigurationsResult^ m_result;
    Platform::String^ m_interfaceMemberInputArg;
};

public ref class ConfigUpdateConfigurationsCalledEventArgs sealed
{
public:
    ConfigUpdateConfigurationsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberInputArg, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ interfaceMemberInputArg2);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ConfigUpdateConfigurationsResult^ Result
    {
        ConfigUpdateConfigurationsResult^ get() { return m_result; }
        void set(_In_ ConfigUpdateConfigurationsResult^ value) { m_result = value; }
    }

    property Platform::String^ InputArg
    {
        Platform::String^ get() { return m_interfaceMemberInputArg; }
    }

    property Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ InputArg2
    {
        Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ get() { return m_interfaceMemberInputArg2; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ConfigUpdateConfigurationsResult^>^ GetResultAsync(ConfigUpdateConfigurationsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ConfigUpdateConfigurationsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ConfigUpdateConfigurationsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ConfigUpdateConfigurationsResult^ m_result;
    Platform::String^ m_interfaceMemberInputArg;
    Windows::Foundation::Collections::IMapView<Platform::String^,Platform::Object^>^ m_interfaceMemberInputArg2;
};

public ref class ConfigResetConfigurationsCalledEventArgs sealed
{
public:
    ConfigResetConfigurationsCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberInputArg, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberInputArg2);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ConfigResetConfigurationsResult^ Result
    {
        ConfigResetConfigurationsResult^ get() { return m_result; }
        void set(_In_ ConfigResetConfigurationsResult^ value) { m_result = value; }
    }

    property Platform::String^ InputArg
    {
        Platform::String^ get() { return m_interfaceMemberInputArg; }
    }

    property Windows::Foundation::Collections::IVectorView<Platform::String^>^ InputArg2
    {
        Windows::Foundation::Collections::IVectorView<Platform::String^>^ get() { return m_interfaceMemberInputArg2; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ConfigResetConfigurationsResult^>^ GetResultAsync(ConfigResetConfigurationsCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ConfigResetConfigurationsResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ConfigResetConfigurationsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ConfigResetConfigurationsResult^ m_result;
    Platform::String^ m_interfaceMemberInputArg;
    Windows::Foundation::Collections::IVectorView<Platform::String^>^ m_interfaceMemberInputArg2;
};

public ref class ConfigSetPasscodeCalledEventArgs sealed
{
public:
    ConfigSetPasscodeCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberInputArg, _In_ Windows::Foundation::Collections::IVectorView<byte>^ interfaceMemberInputArg2);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ConfigSetPasscodeResult^ Result
    {
        ConfigSetPasscodeResult^ get() { return m_result; }
        void set(_In_ ConfigSetPasscodeResult^ value) { m_result = value; }
    }

    property Platform::String^ InputArg
    {
        Platform::String^ get() { return m_interfaceMemberInputArg; }
    }

    property Windows::Foundation::Collections::IVectorView<byte>^ InputArg2
    {
        Windows::Foundation::Collections::IVectorView<byte>^ get() { return m_interfaceMemberInputArg2; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ConfigSetPasscodeResult^>^ GetResultAsync(ConfigSetPasscodeCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ConfigSetPasscodeResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ConfigSetPasscodeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ConfigSetPasscodeResult^ m_result;
    Platform::String^ m_interfaceMemberInputArg;
    Windows::Foundation::Collections::IVectorView<byte>^ m_interfaceMemberInputArg2;
};

// Readable Properties
public ref class ConfigGetVersionRequestedEventArgs sealed
{
public:
    ConfigGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ConfigGetVersionResult^ Result
    {
        ConfigGetVersionResult^ get() { return m_result; }
        void set(_In_ ConfigGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ConfigGetVersionResult^>^ GetResultAsync(ConfigGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ConfigGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ConfigGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ConfigGetVersionResult^ m_result;
};

// Writable Properties
} } } 
