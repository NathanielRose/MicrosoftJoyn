//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF { namespace LampService {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement ILampServiceService. Instead, LampServiceServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class LampServiceServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] ILampServiceService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<LampServiceServiceEventAdapter^, LampServiceClearLampFaultCalledEventArgs^>^ ClearLampFaultCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceServiceEventAdapter^, LampServiceClearLampFaultCalledEventArgs^>^ handler) 
        { 
            return _ClearLampFaultCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceServiceEventAdapter^>(sender), safe_cast<LampServiceClearLampFaultCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ClearLampFaultCalled -= token; 
        } 
    internal: 
        void raise(LampServiceServiceEventAdapter^ sender, LampServiceClearLampFaultCalledEventArgs^ args) 
        { 
            _ClearLampFaultCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<LampServiceServiceEventAdapter^, LampServiceGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceServiceEventAdapter^, LampServiceGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceServiceEventAdapter^>(sender), safe_cast<LampServiceGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(LampServiceServiceEventAdapter^ sender, LampServiceGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceServiceEventAdapter^, LampServiceGetLampServiceVersionRequestedEventArgs^>^ GetLampServiceVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceServiceEventAdapter^, LampServiceGetLampServiceVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetLampServiceVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceServiceEventAdapter^>(sender), safe_cast<LampServiceGetLampServiceVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampServiceVersionRequested -= token; 
        } 
    internal: 
        void raise(LampServiceServiceEventAdapter^ sender, LampServiceGetLampServiceVersionRequestedEventArgs^ args) 
        { 
            _GetLampServiceVersionRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<LampServiceServiceEventAdapter^, LampServiceGetLampFaultsRequestedEventArgs^>^ GetLampFaultsRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<LampServiceServiceEventAdapter^, LampServiceGetLampFaultsRequestedEventArgs^>^ handler) 
        { 
            return _GetLampFaultsRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<LampServiceServiceEventAdapter^>(sender), safe_cast<LampServiceGetLampFaultsRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLampFaultsRequested -= token; 
        } 
    internal: 
        void raise(LampServiceServiceEventAdapter^ sender, LampServiceGetLampFaultsRequestedEventArgs^ args) 
        { 
            _GetLampFaultsRequested(sender, args);
        } 
    }

    // Property Write Events
    // ILampServiceService Implementation
    virtual Windows::Foundation::IAsyncOperation<LampServiceClearLampFaultResult^>^ ClearLampFaultAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberLampFaultCode);

    virtual Windows::Foundation::IAsyncOperation<LampServiceGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<LampServiceGetLampServiceVersionResult^>^ GetLampServiceVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<LampServiceGetLampFaultsResult^>^ GetLampFaultsAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);


private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ClearLampFaultCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampServiceVersionRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLampFaultsRequested;
};

} } } } 
